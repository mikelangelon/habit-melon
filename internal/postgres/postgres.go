package postgres

import (
	"fmt"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

func NewPostgresDB(dsn string) (*sqlx.DB, error) {
	db, err := sqlx.Open("postgres", dsn)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, fmt.Errorf("failed to connect to db: %w", err)
	}

	err = createTables(db)
	if err != nil {
		return nil, err
	}

	return db, nil
}

func createTables(db *sqlx.DB) error {
	createHabitsTableQuery := `
		CREATE TABLE IF NOT EXISTS habits
		(
			habit_id integer generated by default as identity primary key,
			description     TEXT  UNIQUE NOT NULL
		);
    `
	_, err := db.Exec(createHabitsTableQuery)
	if err != nil {
		return fmt.Errorf("failed to create table: %w", err)
	}

	createHabitDaysTableQuery := `
		CREATE TABLE IF NOT EXISTS habit_days
		(
			habit_id integer REFERENCES habits (habit_id) ON DELETE CASCADE,
			day    DATE, 
			PRIMARY KEY (habit_id, day)
		);
    `
	_, err = db.Exec(createHabitDaysTableQuery)
	if err != nil {
		return fmt.Errorf("failed to create table: %w", err)
	}

	return nil
}
